version: 0.2

# AWS CodeBuild Buildspec for Next.js Web Application
# Builds Docker image and pushes to ECR

env:
  parameter-store:
    AWS_ACCOUNT_ID: "/telehealthcrm/prod/aws_account_id"
    AWS_REGION: "/telehealthcrm/prod/aws_region"
    API_URL: "/telehealthcrm/prod/api_url"
  variables:
    ECR_REPOSITORY: telehealth-web
    NEXT_PUBLIC_APP_URL: "https://app.eudaura.com"

phases:
  install:
    runtime-versions:
      docker: 24
      nodejs: 20
    commands:
      - echo "Installing build dependencies"
      - corepack enable
      - corepack prepare pnpm@9.6.0 --activate

  pre_build:
    commands:
      - echo "Logging in to Amazon ECR"
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      - echo "Setting image tag"
      - RAW_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest}
      - export IMAGE_TAG=${RAW_TAG:0:32}
      - if [ -z "$IMAGE_TAG" ]; then export IMAGE_TAG=latest; fi
      - echo "Using image tag $IMAGE_TAG"
      
      - echo "Preparing build arguments"
      - export NEXT_PUBLIC_API_URL="https://api.eudaura.com"
      - export NEXT_PUBLIC_WS_URL="wss://api.eudaura.com"

  build:
    commands:
      - echo "Building Next.js application"
      - cd apps/web
      
      - echo "Building Docker image"
      - docker build \
          --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
          --build-arg NEXT_PUBLIC_WS_URL=$NEXT_PUBLIC_WS_URL \
          --build-arg NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL \
          -t telehealth-web:build \
          -f Dockerfile .
      
      - docker tag telehealth-web:build ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:$IMAGE_TAG
      - docker tag telehealth-web:build ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest

  post_build:
    commands:
      - echo "Pushing Docker image to ECR"
      - docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:$IMAGE_TAG
      - docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest
      
      - echo "Creating image definitions file"
      - printf '{"repository":"%s","tag":"%s"}' ${ECR_REPOSITORY} $IMAGE_TAG > ../../image-details-web.json
      
      - echo "Build complete"

artifacts:
  files:
    - image-details-web.json
  name: web-build-artifacts

cache:
  paths:
    - '/root/.pnpm-store/**/*'

