// Datasource & generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant schema. Field-level encryption for highly sensitive fields is handled at the application layer (KMS envelope).

model Organization {
  id          String   @id @default(uuid())
  type        OrgType
  name        String
  npi         String?  @db.VarChar(20)
  address     Json?
  contactInfo Json?    // Contact information
  settings    Json?    // Organization settings
  compliance  Json?    // Compliance information
  users       User[]
  patients    Patient[]
  consults    Consult[]
  rxs         Rx[]
  labOrders   LabOrder[]
  shipments   Shipment[]
  marketerShipments Shipment[] @relation("MarketerShipments")
  results     LabResult[]
  pharmacyFulfillments PharmacyFulfillment[]
  audits      AuditLog[]
  notifs      Notification[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrgType {
  PROVIDER
  LAB
  PHARMACY
  MARKETER
}

model User {
  id            String   @id @default(uuid())
  orgId         String
  org           Organization @relation(fields: [orgId], references: [id])
  role          UserRole
  email         String   @unique
  firstName     String?
  lastName      String?
  phoneNumber   String?
  department    String?
  purposeOfUse  String?
  isActive      Boolean  @default(true)
  status        String   @db.VarChar(20)
  mfaEnrolled   Boolean  @default(false)
  lastLoginAt   DateTime?
  
  // Provider availability and licensing
  isAvailable   Boolean  @default(true) @map("is_available")
  npi           String?  @map("npi")
  dea           String?  @map("dea")
  statesLicensed Json?   @map("states_licensed") // Array of state codes
  availability  Json?    @map("availability_schedule") // Days/hours schedule
  
  // Video visits as clinician
  videoVisitsAsClinician VideoVisit[] @relation("videoVisitsAsClinician")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([orgId])
  @@index([isAvailable, role])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  LAB_TECH
  PHARMACIST
  MARKETER
  MARKETER_ADMIN
  SUPPORT
  AUDITOR
  ORG_ADMIN
}

model Patient {
  id                String   @id @default(uuid())
  orgId             String
  org               Organization @relation(fields: [orgId], references: [id])
  tenantUid         String   @db.VarChar(64)
  legalName         String
  dob               DateTime
  phones            String[]
  emails            String[]
  address           Json?
  insurancePolicyId String?
  insurancePolicy   InsurancePolicy? @relation(fields: [insurancePolicyId], references: [id])
  piiTokenId        String?  @db.VarChar(128)
  consults          Consult[]
  duplicateLinks    PatientDuplicateLink[]
  videoVisits       VideoVisit[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@index([orgId])
  @@index([tenantUid])
}

model InsurancePolicy {
  id                 String   @id @default(uuid())
  payerCode          String   @db.VarChar(20)
  memberIdEncrypted  Bytes    // Application-encrypted (KMS data key)
  groupId            String?  @db.VarChar(64)
  planName           String?
  coverageActive     Boolean  @default(true)
  patients           Patient[]
}

model Consult {
  id              String   @id @default(uuid())
  orgId           String
  org             Organization @relation(fields: [orgId], references: [id])
  patientId       String
  patient         Patient @relation(fields: [patientId], references: [id])
  marketerOrgId   String?
  providerOrgId   String
  status          ConsultStatus
  reasonCodes     String[]
  createdFrom     CreatedFrom
  createdByUserId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  rxs             Rx[]
  labOrders       LabOrder[]
  @@index([orgId])
  @@index([patientId])
}

enum ConsultStatus {
  PENDING
  PASSED
  FAILED
  APPROVED
  DECLINED
}

enum CreatedFrom {
  CALL
  WEB
  API
}

model Rx {
  id              String   @id @default(uuid())
  orgId           String
  org             Organization @relation(fields: [orgId], references: [id])
  consultId       String
  consult         Consult @relation(fields: [consultId], references: [id])
  providerUserId  String
  pharmacyOrgId   String
  status          RxStatus
  scriptBlobEncrypted Bytes // Application-encrypted (KMS data key)
  refillsAllowed  Int      @default(0)
  refillsUsed     Int      @default(0)
  pharmacyFulfillment PharmacyFulfillment[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@index([orgId])
  @@index([consultId])
}

enum RxStatus {
  DRAFT
  SUBMITTED
  DISPENSED
  CANCELLED
}

model LabOrder {
  id         String   @id @default(uuid())
  orgId      String
  org        Organization @relation(fields: [orgId], references: [id])
  consultId  String
  consult    Consult @relation(fields: [consultId], references: [id])
  labOrgId   String
  tests      String[]
  status     LabOrderStatus
  shipments  Shipment[]
  results    LabResult[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([orgId])
  @@index([consultId])
}

enum LabOrderStatus {
  DRAFT
  SUBMITTED
  IN_TRANSIT
  RECEIVED
  RESULTS_READY
}

model Shipment {
  id                String         @id @default(uuid())
  marketerOrgId     String         // Org scoping for marketers
  marketerOrg       Organization   @relation("MarketerShipments", fields: [marketerOrgId], references: [id])
  createdByUserId   String         // User who created the shipment
  assignedToUserId  String?        // Optional assignment
  carrier           Carrier        @default(UPS)
  trackingNumber    String         @unique
  reference         String?        // Non-PHI reference
  status            ShipmentStatus @default(CREATED)
  eta               DateTime?      // Estimated delivery date
  lastEvent         String?        // Last tracking event description
  lastEventAt       DateTime?      // Last tracking event timestamp
  lastCarrierPollAt DateTime?      // Last time we polled carrier API
  shipTo            Json           // Non-PHI shipping fields only
  audit             Json           // Change history
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Optional relationships (for backward compatibility)
  orgId             String?
  org               Organization?  @relation(fields: [orgId], references: [id])
  labOrderId        String?
  labOrder          LabOrder?      @relation(fields: [labOrderId], references: [id])
  
  @@index([marketerOrgId, status])
  @@index([trackingNumber])
  @@index([status, updatedAt]) // For polling queries
  @@index([createdByUserId])
  @@index([assignedToUserId])
}

enum Carrier {
  UPS
  FEDEX
  USPS
  OTHER
}

enum ShipmentStatus {
  CREATED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  EXCEPTION
}

model LabResult {
  id                   String   @id @default(uuid())
  orgId                String
  org                  Organization @relation(fields: [orgId], references: [id])
  labOrderId           String
  labOrder             LabOrder @relation(fields: [labOrderId], references: [id])
  resultBlobEncrypted  Bytes // Application-encrypted (KMS data key)
  flaggedAbnormal      Boolean? @default(false)
  releasedToProviderAt DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  @@index([orgId])
  @@index([labOrderId])
}

model PharmacyFulfillment {
  id        String   @id @default(uuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id])
  rxId      String
  rx        Rx @relation(fields: [rxId], references: [id])
  status    FulfillmentStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([orgId])
  @@index([rxId])
}

enum FulfillmentStatus {
  QUEUED
  READY
  SHIPPED
  DELIVERED
}

// E-Signature enums for non-repudiation
enum SignatureEntity {
  RX
  LAB_ORDER
  DOCUMENT
}

enum SignatureType {
  WEBAUTHN_KMS
  TOTP_KMS
  PASSWORD_KMS
}

model DuplicateGroup {
  id              String   @id @default(uuid())
  strategy        String
  confidenceScore Float
  links           PatientDuplicateLink[]
}

model PatientDuplicateLink {
  patientId       String
  patient         Patient @relation(fields: [patientId], references: [id])
  dupGroupId      String
  group           DuplicateGroup @relation(fields: [dupGroupId], references: [id])
  confidenceScore Float
  @@id([patientId, dupGroupId])
}

model AuditLog {
  id            String   @id @default(uuid())
  userId        String?  // System user ID for automated actions
  actorUserId   String?
  actorOrgId    String?
  action        String
  entity        String
  entityId      String
  ts            DateTime @default(now())
  ip            String?
  purposeOfUse  String?
  before        Json?
  after         Json?
  org           Organization? @relation(fields: [actorOrgId], references: [id])
  @@index([actorOrgId])
  @@index([entity, entityId])
}

model Notification {
  id          String   @id @default(uuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id])
  type        String
  targetUserId String?
  targetOrgId String?
  payload     Json
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([orgId])
}

// Immutable e-signature ledger for non-repudiation
model SignatureEvent {
  id                    String          @id @default(uuid())
  actorUserId           String          @map("actor_user_id")
  actorOrgId            String          @map("actor_org_id")
  role                  String

  entity                SignatureEntity
  entityId              String          @map("entity_id")

  docSha256             String          @map("doc_sha256")
  docS3Key              String          @map("doc_s3_key")
  docVersion            Int             @map("doc_version")

  signatureType         SignatureType   @map("signature_type")
  webauthnCredentialId  String?         @map("webauthn_credential_id")
  webauthnAaguid        String?         @map("webauthn_aaguid")

  stepUpUsed            Boolean         @map("step_up_used")
  mfaUsed               Boolean         @map("mfa_used")

  ipAddress             String          @map("ip_address")
  userAgent             String          @map("user_agent")
  deviceFingerprintId   String?         @map("device_fingerprint_id")
  geoCity               String?         @map("geo_city")
  geoRegion             String?         @map("geo_region")
  geoCountry            String?         @map("geo_country")

  tsaToken              Bytes?          @map("tsa_token")
  kmsKeyId              String          @map("kms_key_id")
  kmsSignature          Bytes           @map("kms_signature")

  chainPrevHash         String?         @map("chain_prev_hash")
  chainHash             String          @map("chain_hash")

  createdAtUtc          DateTime        @default(now()) @map("created_at_utc")

  @@index([actorOrgId, createdAtUtc])
  @@index([entity, entityId])
  @@index([actorUserId, createdAtUtc])
  @@index([chainHash])
  @@map("signature_events")
}

// Document index for Patient Folder
model Document {
  id         String   @id @default(uuid())
  patientId  String   @map("patient_id")
  category   DocumentCategory
  title      String
  createdBy  String   @map("created_by")
  s3Key      String   @map("s3_key")
  sha256     String
  sizeBytes  Int      @map("size_bytes")
  mimeType   String   @map("mime_type")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([patientId, category])
  @@index([createdBy])
  @@index([sha256])
  @@map("documents")
}

enum DocumentCategory {
  RX
  LAB_ORDER
  LAB_RESULT
  CONSENT
  NOTE
  OTHER
}

// Requisition templates uploaded by marketer orgs (lab requisition PDFs/images)
model RequisitionTemplate {
  id                String   @id @default(uuid())
  orgId             String   @map("org_id")
  labName           String   @map("lab_name")
  title             String
  filename          String
  s3Key             String   @map("s3_key")
  sha256            String
  sizeBytes         Int      @map("size_bytes")
  mimeType          String   @map("mime_type")
  createdByUserId   String   @map("created_by_user_id")
  insurancesAccepted Json?   @map("insurances_accepted") // {commercial: boolean, medicare: boolean}
  createdAt         DateTime @default(now()) @map("created_at")
  publishedAt       DateTime? @map("published_at")

  @@index([orgId, createdAt])
  @@index([labName])
  @@index([sha256])
  @@map("requisition_templates")
}

// Amazon Connect and phone indexing
model PatientPhone {
  id          String   @id @default(uuid())
  patientId   String   @map("patient_id")
  e164        String   @map("e164")
  digits10    String   @map("digits10")
  digits7     String   @map("digits7")
  verified    Boolean  @default(false)
  type        PhoneType @default(MOBILE)
  primary     Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([patientId, e164])
  @@index([e164])
  @@index([digits10])
  @@index([digits7])
  @@map("patient_phones")
}

enum PhoneType {
  MOBILE
  HOME
  WORK
}

model CallLookupIndex {
  e164            String   @id @map("e164")
  lastSeenAt      DateTime @map("last_seen_at")
  orgId           String?  @map("org_id")
  patientId       String?  @map("patient_id")
  lastConsultId   String?  @map("last_consult_id")

  @@index([lastSeenAt])
  @@map("call_lookup_index")
}

model IntakeLink {
  id              String   @id @default(uuid())
  marketerOrgId   String   @map("marketer_org_id")
  services        String   @map("services") // 'RX'|'LABS'|'BOTH'
  clientIds       Json     @map("client_ids") // Array of provider org IDs
  campaign        String?  @map("campaign")
  didNumber       String?  @map("did_number")
  allowedOrigins  Json?    @map("allowed_origins")
  rateLimit       Int?     @map("rate_limit")
  webhookUrl      String?  @map("webhook_url")
  active          Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([marketerOrgId, active])
  @@index([didNumber])
  @@map("intake_links")
}

model IntakeSubmission {
  id              String   @id @default(uuid())
  intakeLinkId    String   @map("intake_link_id")
  marketerOrgId   String   @map("marketer_org_id")
  patientStub     Json     @map("patient_stub") // {name, phone, dob, state, address?}
  serviceRequested String  @map("service_requested")
  triageJson      Json     @map("triage_json")
  consent         Json     @map("consent") // {tcpa, hipaa}
  files           Json?    @map("files")
  ip              String   @map("ip")
  userAgent       String   @map("user_agent")
  status          String   @default("PENDING")
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([intakeLinkId, createdAt])
  @@index([marketerOrgId, status])
  @@map("intake_submissions")
}

model InboundCall {
  id              String   @id @default(uuid())
  contactId       String   @map("contact_id")
  dnis            String   @map("dnis")
  ani             String   @map("ani")
  marketerOrgId   String?  @map("marketer_org_id")
  clientId        String?  @map("client_id")
  consultId       String?  @map("consult_id")
  recordingS3Key  String?  @map("recording_s3_key")
  transcriptS3Key String?  @map("transcript_s3_key")
  startedAt       DateTime @map("started_at")
  endedAt         DateTime? @map("ended_at")

  @@index([ani, startedAt])
  @@index([consultId])
  @@map("inbound_calls")
}

// Physician onboarding
enum ProviderOnboardingStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

model ProviderOnboarding {
  id                          String                     @id @default(uuid())
  userId                      String?                    @map("user_id")
  email                       String
  mobile                      String                     @map("mobile_phone")
  firstName                   String                     @map("first_name")
  lastName                    String                     @map("last_name")
  emailVerified               Boolean                    @default(false) @map("email_verified")
  mfaEnrolled                 Boolean                    @default(false) @map("mfa_enrolled")
  status                      ProviderOnboardingStatus   @default(PENDING)
  stepsCompleted              Int                        @default(0) @map("steps_completed")

  // Step 2: credentials
  npi                         String?                    @map("npi")
  dea                         String?                    @map("dea")
  licenses                    Json?                      @map("licenses_json")
  boards                      Json?                      @map("boards_json")
  malpractice                 Json?                      @map("malpractice_json")
  uploads                     Json?                      @map("uploads_json")
  pecosActive                 Boolean?                   @map("pecos_active")

  // Step 3: practice
  practice                    Json?                      @map("practice_json")

  // Step 4: agreements
  agreementsSignatureEventId  String?                    @map("agreements_signature_event_id")

  createdAt                   DateTime                   @default(now()) @map("created_at")
  updatedAt                   DateTime                   @updatedAt @map("updated_at")

  @@index([email])
  @@index([status, createdAt])
  @@map("provider_onboarding")
}

// ============================================
// VIDEO VISIT SYSTEM (HIPAA/SOC2 Compliant)
// ============================================

enum VideoVisitStatus {
  SCHEDULED    // Visit created, not yet started
  ACTIVE       // Visit in progress
  COMPLETED    // Visit ended normally
  CANCELLED    // Cancelled before start
  NO_SHOW      // Patient didn't join
  TECHNICAL    // Ended due to technical issues
}

model VideoVisit {
  id                String           @id @default(uuid())
  
  // Participants
  patientId         String           @map("patient_id")
  patient           Patient          @relation(fields: [patientId], references: [id])
  clinicianId       String           @map("clinician_id")
  clinician         User             @relation("videoVisitsAsClinician", fields: [clinicianId], references: [id])
  
  // Scheduling
  scheduledAt       DateTime         @map("scheduled_at")
  duration          Int              @default(30) // Minutes
  timezone          String           @default("America/New_York")
  
  // Status tracking
  status            VideoVisitStatus @default(SCHEDULED)
  startedAt         DateTime?        @map("started_at")
  endedAt           DateTime?        @map("ended_at")
  actualDuration    Int?             @map("actual_duration") // Actual minutes
  
  // Connect integration
  connectContactId  String?          @unique @map("connect_contact_id")
  connectInstanceId String?          @map("connect_instance_id")
  meetingId         String?          @unique @map("meeting_id") // Chime meeting ID
  
  // Notification tracking (HIPAA: delivery confirmation)
  notificationChannel String?        @map("notification_channel") // sms|email|both
  smsMessageId      String?          @map("sms_message_id")
  smsDeliveredAt    DateTime?        @map("sms_delivered_at")
  emailMessageId    String?          @map("email_message_id")
  emailDeliveredAt  DateTime?        @map("email_delivered_at")
  emailOpenedAt     DateTime?        @map("email_opened_at")
  
  // Visit metadata (encrypted at rest via KMS)
  visitType         String?          @map("visit_type") // initial|follow-up|urgent
  modality          String?          @map("modality") @default("video") // video|audio|phone
  chiefComplaint    String?          @map("chief_complaint") @db.Text // Encrypted
  clinicalNotes     String?          @map("clinical_notes") @db.Text // Encrypted
  
  // Participant join tracking
  patientJoinedAt   DateTime?        @map("patient_joined_at")
  clinicianJoinedAt DateTime?        @map("clinician_joined_at")
  participants      Json?            @map("participants") // Array of {role, joinedAt, leftAt}
  
  // Recording (opt-in only, WORM compliance)
  recordingEnabled  Boolean          @default(false) @map("recording_enabled")
  recordingS3Key    String?          @map("recording_s3_key")
  recordingKmsKeyId String?          @map("recording_kms_key_id")
  
  // Quality metrics
  networkQuality    Json?            @map("network_quality") // {patient, clinician}
  deviceInfo        Json?            @map("device_info") // Browser, OS, camera/mic
  
  // Audit trail
  createdBy         String?          @map("created_by")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  
  // Relations
  tokens            OneTimeToken[]
  auditLogs         VideoAuditLog[]
  
  // Indexes for performance
  @@index([patientId, scheduledAt])
  @@index([clinicianId, scheduledAt])
  @@index([status, scheduledAt])
  @@index([scheduledAt]) // For cleanup jobs
  @@map("video_visits")
}

enum TokenStatus {
  ACTIVE      // Token is valid and unused
  REDEEMED    // Token has been used
  EXPIRED     // Token expired (TTL passed)
  REVOKED     // Manually revoked (e.g., visit cancelled)
}

model OneTimeToken {
  id                String       @id @default(uuid()) // This is the JWT jti claim
  
  // Associated visit
  visitId           String       @map("visit_id")
  visit             VideoVisit   @relation(fields: [visitId], references: [id], onDelete: Cascade)
  
  // Token metadata
  role              String       @map("role") // patient|clinician
  status            TokenStatus  @default(ACTIVE)
  nonce             String       @map("nonce") @db.VarChar(64) // Random 32-byte hex
  
  // Lifecycle timestamps
  issuedAt          DateTime     @map("issued_at")
  expiresAt         DateTime     @map("expires_at") // 20-30 min TTL
  redeemedAt        DateTime?    @map("redeemed_at")
  
  // Single-use enforcement (HIPAA: access control)
  usageCount        Int          @default(0) @map("usage_count")
  maxUsageCount     Int          @default(1) @map("max_usage_count")
  
  // Security: bind to first redemption context
  redemptionIP      String?      @map("redemption_ip") @db.VarChar(45) // IPv6-compatible
  redemptionUA      String?      @map("redemption_ua") @db.Text // User agent
  issuedToIP        String?      @map("issued_to_ip") @db.VarChar(45)
  issuedToUA        String?      @map("issued_to_ua") @db.Text
  
  // Short link mapping
  shortCode         String?      @unique @map("short_code") @db.VarChar(8)
  
  // Audit trail
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  
  // Indexes
  @@index([visitId, role])
  @@index([status, expiresAt]) // For cleanup jobs
  @@index([expiresAt]) // TTL queries
  @@map("one_time_tokens")
}

enum VideoAuditEventType {
  VISIT_SCHEDULED           // Visit created
  TOKEN_ISSUED              // Join link generated
  TOKEN_REDEEMED            // Token used to join
  TOKEN_EXPIRED             // Token expired unused
  TOKEN_REVOKED             // Token manually revoked
  NOTIFICATION_SENT         // SMS/Email sent
  NOTIFICATION_DELIVERED    // Delivery confirmed
  NOTIFICATION_FAILED       // Delivery failed
  VISIT_STARTED             // Connect session started
  PARTICIPANT_JOINED        // Patient/clinician joined
  PARTICIPANT_LEFT          // Participant left
  VISIT_ENDED               // Visit ended
  LINK_RESENT               // New link requested
  RECORDING_STARTED         // Recording started (if enabled)
  RECORDING_STOPPED         // Recording stopped
  TECHNICAL_ISSUE           // Technical problem logged
}

model VideoAuditLog {
  id                String               @id @default(uuid())
  
  // Event details
  eventType         VideoAuditEventType  @map("event_type")
  timestamp         DateTime             @default(now()) @map("timestamp")
  
  // Context (HIPAA: who/what/when/where)
  visitId           String?              @map("visit_id")
  visit             VideoVisit?          @relation(fields: [visitId], references: [id], onDelete: Cascade)
  tokenId           String?              @map("token_id")
  actorId           String?              @map("actor_id") // userId or 'system'
  actorRole         String?              @map("actor_role") // patient|clinician|system
  
  // Technical context
  ipAddress         String?              @map("ip_address") @db.VarChar(45)
  userAgent         String?              @map("user_agent") @db.Text
  
  // Event metadata (JSON, no PHI)
  metadata          Json?                @map("metadata")
  
  // Error tracking
  success           Boolean              @default(true)
  errorCode         String?              @map("error_code")
  errorMessage      String?              @map("error_message") @db.Text
  
  // Compliance: 7-year retention (HIPAA)
  expiresAt         DateTime             @map("expires_at") // timestamp + 7 years
  
  // Immutability: cannot be updated
  createdAt         DateTime             @default(now()) @map("created_at")
  
  // Indexes for audit queries
  @@index([visitId, timestamp])
  @@index([tokenId, timestamp])
  @@index([eventType, timestamp])
  @@index([actorId, timestamp])
  @@index([expiresAt]) // For TTL cleanup
  @@map("video_audit_logs")
}
