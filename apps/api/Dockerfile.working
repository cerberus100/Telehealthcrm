# Working Production Dockerfile for NestJS API
# Build from PROJECT ROOT: docker build -f apps/api/Dockerfile.working -t telehealth-api .

FROM node:20-alpine AS base
RUN apk add --no-cache curl python3 make g++
RUN corepack enable && corepack prepare pnpm@9.6.0 --activate

# Install dependencies
FROM base AS deps
WORKDIR /app
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/api/package.json ./apps/api/
COPY packages/db/package.json ./packages/db/
RUN pnpm install --frozen-lockfile

# Build
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/api/node_modules ./apps/api/node_modules
COPY --from=deps /app/packages/db/node_modules ./packages/db/node_modules

COPY packages/db/prisma ./packages/db/prisma
COPY apps/api/src ./apps/api/src
COPY apps/api/tsconfig.json ./apps/api/
COPY tsconfig.json ./

# Generate Prisma client
WORKDIR /app/packages/db
RUN pnpm prisma generate

# Build application
WORKDIR /app/apps/api
RUN pnpm build

# Runner
FROM node:20-alpine AS production
RUN apk add --no-cache dumb-init curl

WORKDIR /app

# Copy built app and dependencies
COPY --from=builder /app/apps/api/dist ./dist
COPY --from=builder /app/apps/api/package.json ./
COPY --from=builder /app/node_modules ./node_modules

# Non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001
RUN chown -R nodejs:nodejs /app
USER nodejs

EXPOSE 3001

HEALTHCHECK --interval=30s --timeout=5s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

CMD ["dumb-init", "node", "dist/main.js"]

